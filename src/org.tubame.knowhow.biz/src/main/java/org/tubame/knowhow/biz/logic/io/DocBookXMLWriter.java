/*
 * DocBookXMLWriter.java
 * Created on 2013/06/28
 *
 * Copyright (C) 2011-2013 Nippon Telegraph and Telephone Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.tubame.knowhow.biz.logic.io;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

import org.docbook.ns.docbook.Article;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.tubame.knowhow.biz.exception.JbmException;
import org.tubame.knowhow.biz.util.JaxbUtil;
import org.tubame.knowhow.biz.util.resource.ApplicationPropertiesUtil;
import org.tubame.knowhow.biz.util.resource.MessagePropertiesUtil;
import org.xml.sax.SAXException;

/**
 * The use of the object that is automatically generated by JAXB, writing
 * process DocBookXML file.<br/>
 * Write to the file DocBookXML Article object in Marshaller method of JAXB.<br/>
 */
public class DocBookXMLWriter implements DocBookWrite {

    /** Logger */
    private static final Logger LOGGER = LoggerFactory
            .getLogger(DocBookXMLWriter.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public void write(String filepath, Article article) throws JbmException,
            IOException {
        OutputStream xmlOutputStream = null;
        try {
            LOGGER.trace(MessagePropertiesUtil
                    .getMessage(MessagePropertiesUtil.LOG_START_DOCBOOK_WRITER));
            // Generate the output stream from a file path
            xmlOutputStream = new FileOutputStream(filepath);
            // Generation of marshaler
            Marshaller marshaller = JaxbUtil
                    .getMarshaller(
                            Article.class,
                            ApplicationPropertiesUtil
                                    .getProperty(ApplicationPropertiesUtil.DOCBOOKSCHEMA_PATH));
            marshaller.marshal(article, xmlOutputStream);
            LOGGER.trace(MessagePropertiesUtil
                    .getMessage(MessagePropertiesUtil.LOG_STOP_DOCBOOK_WRITER));
        } catch (FileNotFoundException e) {
            throw new JbmException(
                    MessagePropertiesUtil
                            .getMessage(MessagePropertiesUtil.ERROR_FILE_SAVE_FAILURE),
                    e);
        } catch (JAXBException e) {
            throw new JbmException(
                    MessagePropertiesUtil
                            .getMessage(MessagePropertiesUtil.ERROR_FILE_SAVE_FAILURE),
                    e);
        } catch (SAXException e) {
            throw new JbmException(
                    MessagePropertiesUtil
                            .getMessage(MessagePropertiesUtil.ERROR_FILE_SAVE_FAILURE),
                    e);
        } finally {
            if (xmlOutputStream != null) {
                xmlOutputStream.close();
            }
        }
    }
}
